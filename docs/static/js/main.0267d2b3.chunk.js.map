{"version":3,"sources":["Controles.js","Resultados.js","ComponentePrincipal.js","index.js"],"names":["Controles","setTablas","tablas","useState","primerValor","setPrimerValor","segundoValor","setSegundoValor","type","value","onChange","e","target","className","onClick","arregloSuma","suma","Number","push","arregloResta","resta","arregloMulti","multiplicar","arregloDividir","dividir","Resultados","map","tabla","i","key","ComponentePrincipal","ReactDOM","render","document","getElementById"],"mappings":"yMAIaA,EAAY,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OAAa,EAGVC,mBAAS,IAHC,mBAGzCC,EAHyC,KAG5BC,EAH4B,OAKRF,mBAAS,IALD,mBAKzCG,EALyC,KAK3BC,EAL2B,KA2GhD,OACI,oCACI,2BAAQC,KAAK,OAAOC,MAAQL,EAAcM,SArGjC,SAACC,GACdN,EAAgBM,EAAEC,OAAOH,UAqGrB,2BAAQD,KAAK,OAAOC,MAAQH,EAAeI,SAlGjC,SAACC,GACfJ,EAAiBI,EAAEC,OAAOH,UA+F1B,IAGI,4BAAQI,UAAW,QAAQC,QAzEV,SAACH,GAEtB,IAAMI,EAAW,YAAOb,GAGlBc,EAAOC,OAAOb,GAAea,OAAOX,GAG1CS,EAAYG,KAAMd,EAAc,MAAQE,EAAe,MAAQU,GAG/Df,EAAUc,KA8DN,WACA,4BAAQF,UAAW,QAAQC,QA1DT,SAACH,GAEvB,IAAMQ,EAAY,YAAOjB,GAGnBkB,EAAQH,OAAOb,GAAea,OAAOX,GAG3Ca,EAAaD,KAAMd,EAAc,MAAQE,EAAe,MAAQc,GAGhEnB,EAAUkB,KA+CN,YACA,4BAAQN,UAAW,QAAQC,QA3CT,SAACH,GAEvB,IAAMU,EAAY,YAAOnB,GAGnBoB,EAAcL,OAAOb,GAAea,OAAOX,GAGjDe,EAAaH,KAAMd,EAAc,MAAQE,EAAe,MAAQgB,GAGhErB,EAAUoB,KAgCN,iBACA,4BAAQR,UAAW,QAAQC,QA5BP,SAACH,GAEzB,IAAMY,EAAc,YAAOrB,GAGrBsB,EAAUP,OAAOb,GAAea,OAAOX,GAG7CiB,EAAeL,KAAMd,EAAc,MAAQE,EAAe,MAAQkB,GAIlEvB,EAAUsB,KAgBN,eCjHCE,EAAa,SAAC,GAAkB,IAAfvB,EAAc,EAAdA,OAI1B,OAAQ,oCACJ,4BAEIA,EAAOwB,KAAK,SAACC,EAAQC,GACb,OAAO,wBAAIC,IAAMD,GAAV,IAAiBD,EAAjB,WCJdG,EAAsB,WAAM,MAIT3B,mBAAS,CAAC,qGAJD,mBAI9BD,EAJ8B,KAItBD,EAJsB,KAQrC,OACI,oCACA,kBAAC,EAAD,CAAWA,UAAYA,EAAYC,OAASA,IAC5C,kBAAC,EAAD,CAAYA,OAASA,M,MCV7B6B,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,e","file":"static/js/main.0267d2b3.chunk.js","sourcesContent":["//es necesario para ejecutar codigo JSX y componentes funcionales\r\nimport React, { useState } from 'react'; \r\n\r\n//creamos un componente funcional \r\nexport const Controles = ( {setTablas, tablas} ) => {\r\n\r\n    //creamos un hook para obtener el valor del input\r\n    const [primerValor, setPrimerValor] = useState('');\r\n\r\n    const [segundoValor, setSegundoValor] = useState('');\r\n\r\n    //creamos un evento que actualiza el valor del hook cuando escriben en el input\r\n    const onChange = (e) => { \r\n        setPrimerValor( e.target.value ) \r\n    }\r\n    \r\n    const onChange2 = (e) => {   // este onChange se le agrego un 2 para el un nuevo input y sea diferente al primario, este onChange2 se nombra hasta abajo CHECALE BIEN \r\n        setSegundoValor( e.target.value ); \r\n    }   \r\n \r\n    //creamos la funcion del evento onclick del boton Resultados\r\n    //const alHacerClick = (e) => { \r\n \r\n        //crear un arreglo vacio para guardar el resultado\r\n    //    const sumar = [...tablas]; // se lleno aqui con el otro hook de \"tablas\", \r\n                                     // para cuando entre el siguiente arreglo de tablas, \r\n                                     // aparesca abajo y no cambien el que ya esta en pantalla\r\n        //ciclo de 1 al 10\r\n    //    for (let i = 1; i <= 10 ; i++) {\r\n            //calcular la tabla 1 x n  2 x n 3 x n etc\r\n    //        const resultado = i * valorInput;\r\n            //ingresar los resultados uno por uno\r\n    //        arreglo.push( valorInput + ' x ' + i + ' = ' + resultado);\r\n    //    }\r\n\r\n        //enviar al HOOK el arreglo que pretendo mostrar en pantalla\r\n    //    setTablas(arreglo);\r\n\r\n    //}; \r\n\r\n\r\n    //funcion del evento onclick del boton Suma\r\n    const alHacerClickSuma = (e) => { \r\n \r\n        const arregloSuma = [...tablas];  // constante para las sumas y que aparescan abajo\r\n        \r\n        // valor del primer Imput mas el otro valor de Imput2\r\n        const suma = Number(primerValor) + Number(segundoValor);\r\n\r\n        //ingresar los resultados de las sumas\r\n        arregloSuma.push( primerValor + ' + ' + segundoValor + ' = ' + suma );\r\n\r\n        //enviar al HOOK el arreglo que pretendo mostrar en pantalla\r\n        setTablas(arregloSuma);\r\n\r\n    };\r\n    \r\n    //funcion del evento onclick del boton Restar\r\n    const alHacerClickResta = (e) => { \r\n \r\n        const arregloResta = [...tablas];  // constante para las restas y que aparescan abajo\r\n\r\n        // valor del primer Imput menos el otro valor de Imput2\r\n        const resta = Number(primerValor) - Number(segundoValor);\r\n\r\n        //ingresar los resultados de las restas\r\n        arregloResta.push( primerValor + ' - ' + segundoValor + ' = ' + resta );\r\n\r\n        //enviar al HOOK el arreglo que pretendo mostrar en pantalla\r\n        setTablas(arregloResta);\r\n\r\n    };\r\n    \r\n    //funcion del evento onclick del boton Multiplicar\r\n    const alHacerClickMulti = (e) => { \r\n \r\n        const arregloMulti = [...tablas];  // constante para las multiplicaciones y que aparescan abajo\r\n       \r\n        // valor del primer Imput por el otro valor de Imput2\r\n        const multiplicar = Number(primerValor) * Number(segundoValor);\r\n\r\n        //ingresar los resultados de las multiplicaciones\r\n        arregloMulti.push( primerValor + ' x ' + segundoValor + ' = ' + multiplicar );\r\n\r\n        //enviar al HOOK el arreglo que pretendo mostrar en pantalla\r\n        setTablas(arregloMulti);\r\n\r\n    };\r\n    \r\n    //funcion del evento onclick del boton Dividir\r\n    const alHacerClickDividir = (e) => { \r\n \r\n        const arregloDividir = [...tablas];  // constante para las divisiones y que aparescan abajo\r\n\r\n        // valor del primer Imput entre el otro valor de Imput2\r\n        const dividir = Number(primerValor) / Number(segundoValor);\r\n\r\n        //ingresar los resultados de las divisiones\r\n        arregloDividir.push( primerValor + ' / ' + segundoValor + ' = ' + dividir );\r\n        //}\r\n\r\n        //enviar al HOOK el arreglo que pretendo mostrar en pantalla\r\n        setTablas(arregloDividir);\r\n\r\n    };\r\n    \r\n    \r\n\r\n    //los componentes funcionales retornan codigo JSX que es codigo HTML\r\n    //mas codigo JavaScript\r\n    //asignamos un evento onClick del boton a la funcion alHacerClick\r\n    return (\r\n        <>\r\n            <input  type=\"text\" value={ primerValor } onChange={ onChange } />\r\n            <input  type=\"text\" value={ segundoValor } onChange={ onChange2 } /> {/* aqui no cambia el onChange ( color verde ), solo se cambia el que esta en blanco */}\r\n            <button className =\"boton\" onClick={ alHacerClickSuma }> Sumar </button>\r\n            <button className =\"boton\" onClick={ alHacerClickResta }> Restar </button>\r\n            <button className =\"boton\" onClick={ alHacerClickMulti }> Multiplicar </button>\r\n            <button className =\"boton\" onClick={ alHacerClickDividir }> Dividir </button>\r\n        </>\r\n    )\r\n};","//es necesario para ejecutar codigo JSX y componentes funcionales\r\nimport React from 'react'; \r\n\r\n//creamos un componente funcional \r\n//recibimos las habitaciones desde props \r\nexport const Resultados = ( { tablas } ) => {\r\n\r\n    //los componentes funcionales retornan codigo JSX que es codigo HTML\r\n    //mas codigo JavaScript\r\n    return (<>\r\n        <ul>  \r\n            {\r\n            tablas.map( (tabla , i) => {\r\n                    return <li key={ i }> { tabla } </li>\r\n                })\r\n            }\r\n        </ul>\r\n        </>);        \r\n};\r\n\r\n\r\n","//es necesario para ejecutar codigo JSX y componentes funcionales\r\n//useState es necesario para crear hooks\r\nimport React, { useState } from 'react'; \r\n\r\n//importamos los componentes secundarios\r\nimport { Controles } from './Controles';\r\nimport { Resultados } from './Resultados';\r\n\r\n//creamos un componente funcional \r\nexport const ComponentePrincipal = () => {\r\n\r\n    //creamos un hook para controlar la cantidad de habitaciones\r\n    //usamos useState para crear el hook\r\n    const [tablas, setTablas] = useState(['Coloca dos dígitos, uno en cada barra. Presiona el botón que quieras para ver su resultado']);\r\n\r\n    //los componentes funcionales retornan codigo JSX que es codigo HTML\r\n    //mas codigo JavaScript\r\n    return (\r\n        <>\r\n        <Controles setTablas={ setTablas } tablas={ tablas }/>\r\n        <Resultados tablas={ tablas } />\r\n        </>\r\n    )\r\n}; ","// es necesario para ejecutar codigo JSX y componentes funcionales\nimport React from 'react';\n// es necesario para navegar en el arbol html\nimport ReactDOM from 'react-dom'; \n// importa el componente principal\nimport { ComponentePrincipal } from './ComponentePrincipal';\n\nimport './index.css' // Hoja de Estilo\n\n// renderiza el documento index.htm y agrega el componente\nReactDOM.render(\n    <ComponentePrincipal />,\n    document.getElementById('principal') // linea para renderizar la aplicacion de React\n);"],"sourceRoot":""}